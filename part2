# Opted not to go down the command line route, though this could just as easily be done using 'sys'

max = int(input("Enter the maximum number. "))  # Maximum number plus one, strictly speaking
rules = input("Enter the numbers for your rules in a list, like so: [3, 5, 7]. ")

for i in range(1, max):
    string = ""

    if i % 3 == 0:
        string += "Fizz"
    if i % 5 == 0:
        string += "Buzz"
    if i % 7 == 0:
        string += "Bang"
    if i % 11 == 0:
        string = "Bong"

    if i % 13 == 0:                         # Instead of this search, maybe a flag could be used that
        firstB = string.find("B")           # keeps track of the index of B (-1 if B does not exist).
        if firstB == -1:  # B not found     # Though not complex, this will mean there will be way more
            string += "Fezz"                # if statements within the above if statements.
        else:                               # This search is linear though, so maybe it's worth doing this.
            string = string[:firstB] + "Fezz" + string[firstB:]

    if i % 17 == 0:
        str_list = [string[n:n+4] for n in range(0, len(string), 4)]
        str_list.reverse()
        string = "".join(str_list)

    if string == "":
        string = i

    print(i, string)


# If I wanted to allow a user to define their own rules, I could allow them to enter a list of paired tuples. The first element could be the
# number that we take the modulo with, as above. The second element could be a function which is applied to the string - perhaps a lambda.
# If we want to add to the string if a multiple is found, then the function could look something like "lambda a : a + 'Fezz'", for example.
# The user would have to supply the rules in the tuple in the same order in which they wish the rules to be applied.
